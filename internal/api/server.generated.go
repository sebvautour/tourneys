//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	uuid "github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// FrontendParams defines model for FrontendParams.
type FrontendParams struct {
	AuthAuthority string `json:"authAuthority"`
	AuthClientId  string `json:"authClientId"`
	AuthScope     string `json:"authScope"`
}

// Game defines model for Game.
type Game struct {
	AwayTeamId     uuid.UUID `json:"awayTeamId,omitempty"`
	AwayTeamScore  *int      `json:"awayTeamScore,omitempty"`
	AwayTeamUserId uuid.UUID `json:"awayTeamUserId,omitempty"`
	HomeTeamId     uuid.UUID `json:"homeTeamId,omitempty"`
	HomeTeamScore  *int      `json:"homeTeamScore,omitempty"`
	HomeTeamUserId uuid.UUID `json:"homeTeamUserId,omitempty"`
	Id             uuid.UUID `gorm:"primarykey" json:"id"`
	SeriesId       uuid.UUID `gorm:"index" json:"seriesId"`
}

// Series defines model for Series.
type Series struct {
	FirstTeamId     uuid.UUID `json:"firstTeamId,omitempty"`
	FirstTeamScore  *int      `json:"firstTeamScore,omitempty"`
	FirstTeamUserId uuid.UUID `json:"firstTeamUserId,omitempty"`
	Id              uuid.UUID `gorm:"primarykey" json:"id"`

	// Round round number that this series is a part of (0, 1, 2)
	Round            int       `json:"round"`
	SecondTeamId     uuid.UUID `json:"secondTeamId,omitempty"`
	SecondTeamScore  *int      `json:"secondTeamScore,omitempty"`
	SecondTeamUserId uuid.UUID `json:"secondTeamUserId,omitempty"`
	TournamentId     uuid.UUID `gorm:"index" json:"tournamentId"`
}

// Team defines model for Team.
type Team struct {
	Id   uuid.UUID `gorm:"primarykey" json:"id"`
	Name string    `json:"name"`
	Slug string    `json:"slug"`
}

// Tournament defines model for Tournament.
type Tournament struct {
	Id   uuid.UUID `gorm:"primarykey" json:"id"`
	Name string    `json:"name"`
}

// User defines model for User.
type User struct {
	Id        uuid.UUID `gorm:"primarykey" json:"id"`
	Name      string    `json:"name"`
	Shortname string    `json:"shortname"`
}

// BadRequest defines model for BadRequest.
type BadRequest = Error

// ServerError defines model for ServerError.
type ServerError = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// CreateGameJSONRequestBody defines body for CreateGame for application/json ContentType.
type CreateGameJSONRequestBody = Game

// UpdateGameByIdJSONRequestBody defines body for UpdateGameById for application/json ContentType.
type UpdateGameByIdJSONRequestBody = Game

// CreateSeriesJSONRequestBody defines body for CreateSeries for application/json ContentType.
type CreateSeriesJSONRequestBody = Series

// UpdateSeriesByIdJSONRequestBody defines body for UpdateSeriesById for application/json ContentType.
type UpdateSeriesByIdJSONRequestBody = Series

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = Team

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = User

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create game
	// (POST /games)
	CreateGame(w http.ResponseWriter, r *http.Request)
	// Get games
	// (GET /games/{gameId})
	GetGameById(w http.ResponseWriter, r *http.Request, gameId uuid.UUID)
	// Update an existing game
	// (PUT /games/{gameId})
	UpdateGameById(w http.ResponseWriter, r *http.Request, gameId uuid.UUID)
	// Get frontend params
	// (GET /params)
	GetFrontendParams(w http.ResponseWriter, r *http.Request)
	// Create series
	// (POST /series)
	CreateSeries(w http.ResponseWriter, r *http.Request)
	// Get series
	// (GET /series/{seriesId})
	GetSeriesById(w http.ResponseWriter, r *http.Request, seriesId uuid.UUID)
	// Update series
	// (PUT /series/{seriesId})
	UpdateSeriesById(w http.ResponseWriter, r *http.Request, seriesId uuid.UUID)
	// Get teams
	// (GET /teams)
	GetTeams(w http.ResponseWriter, r *http.Request)
	// Create team
	// (POST /teams)
	CreateTeam(w http.ResponseWriter, r *http.Request)
	// Get tournaments
	// (GET /tournaments)
	GetTournaments(w http.ResponseWriter, r *http.Request)
	// Get games
	// (GET /tournaments/{tournamentId}/games)
	GetGamesByTournamentId(w http.ResponseWriter, r *http.Request, tournamentId uuid.UUID)
	// Get tournament series
	// (GET /tournaments/{tournamentId}/series)
	GetSeriesByTournamentId(w http.ResponseWriter, r *http.Request, tournamentId uuid.UUID)
	// Get users
	// (GET /users)
	GetUsers(w http.ResponseWriter, r *http.Request)
	// Create user
	// (POST /users)
	CreateUser(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreateGame operation middleware
func (siw *ServerInterfaceWrapper) CreateGame(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateGame(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetGameById operation middleware
func (siw *ServerInterfaceWrapper) GetGameById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", r.PathValue("gameId"), &gameId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "gameId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGameById(w, r, gameId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateGameById operation middleware
func (siw *ServerInterfaceWrapper) UpdateGameById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", r.PathValue("gameId"), &gameId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "gameId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateGameById(w, r, gameId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetFrontendParams operation middleware
func (siw *ServerInterfaceWrapper) GetFrontendParams(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFrontendParams(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSeries operation middleware
func (siw *ServerInterfaceWrapper) CreateSeries(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSeries(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSeriesById operation middleware
func (siw *ServerInterfaceWrapper) GetSeriesById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "seriesId" -------------
	var seriesId uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "seriesId", r.PathValue("seriesId"), &seriesId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "seriesId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSeriesById(w, r, seriesId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateSeriesById operation middleware
func (siw *ServerInterfaceWrapper) UpdateSeriesById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "seriesId" -------------
	var seriesId uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "seriesId", r.PathValue("seriesId"), &seriesId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "seriesId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSeriesById(w, r, seriesId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTeams operation middleware
func (siw *ServerInterfaceWrapper) GetTeams(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTeams(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTeam operation middleware
func (siw *ServerInterfaceWrapper) CreateTeam(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTeam(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTournaments operation middleware
func (siw *ServerInterfaceWrapper) GetTournaments(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTournaments(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetGamesByTournamentId operation middleware
func (siw *ServerInterfaceWrapper) GetGamesByTournamentId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "tournamentId" -------------
	var tournamentId uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tournamentId", r.PathValue("tournamentId"), &tournamentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tournamentId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGamesByTournamentId(w, r, tournamentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSeriesByTournamentId operation middleware
func (siw *ServerInterfaceWrapper) GetSeriesByTournamentId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "tournamentId" -------------
	var tournamentId uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tournamentId", r.PathValue("tournamentId"), &tournamentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tournamentId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSeriesByTournamentId(w, r, tournamentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/games", wrapper.CreateGame)
	m.HandleFunc("GET "+options.BaseURL+"/games/{gameId}", wrapper.GetGameById)
	m.HandleFunc("PUT "+options.BaseURL+"/games/{gameId}", wrapper.UpdateGameById)
	m.HandleFunc("GET "+options.BaseURL+"/params", wrapper.GetFrontendParams)
	m.HandleFunc("POST "+options.BaseURL+"/series", wrapper.CreateSeries)
	m.HandleFunc("GET "+options.BaseURL+"/series/{seriesId}", wrapper.GetSeriesById)
	m.HandleFunc("PUT "+options.BaseURL+"/series/{seriesId}", wrapper.UpdateSeriesById)
	m.HandleFunc("GET "+options.BaseURL+"/teams", wrapper.GetTeams)
	m.HandleFunc("POST "+options.BaseURL+"/teams", wrapper.CreateTeam)
	m.HandleFunc("GET "+options.BaseURL+"/tournaments", wrapper.GetTournaments)
	m.HandleFunc("GET "+options.BaseURL+"/tournaments/{tournamentId}/games", wrapper.GetGamesByTournamentId)
	m.HandleFunc("GET "+options.BaseURL+"/tournaments/{tournamentId}/series", wrapper.GetSeriesByTournamentId)
	m.HandleFunc("GET "+options.BaseURL+"/users", wrapper.GetUsers)
	m.HandleFunc("POST "+options.BaseURL+"/users", wrapper.CreateUser)

	return m
}

type BadRequestJSONResponse Error

type ServerErrorJSONResponse Error

type UnauthorizedJSONResponse Error

type CreateGameRequestObject struct {
	Body *CreateGameJSONRequestBody
}

type CreateGameResponseObject interface {
	VisitCreateGameResponse(w http.ResponseWriter) error
}

type CreateGame201JSONResponse struct {
	Game Game `json:"game"`
}

func (response CreateGame201JSONResponse) VisitCreateGameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateGame400JSONResponse struct{ BadRequestJSONResponse }

func (response CreateGame400JSONResponse) VisitCreateGameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateGame401JSONResponse struct{ UnauthorizedJSONResponse }

func (response CreateGame401JSONResponse) VisitCreateGameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateGame500JSONResponse struct{ ServerErrorJSONResponse }

func (response CreateGame500JSONResponse) VisitCreateGameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetGameByIdRequestObject struct {
	GameId uuid.UUID `json:"gameId"`
}

type GetGameByIdResponseObject interface {
	VisitGetGameByIdResponse(w http.ResponseWriter) error
}

type GetGameById200JSONResponse struct {
	Game Game `json:"game"`
}

func (response GetGameById200JSONResponse) VisitGetGameByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGameById400JSONResponse struct{ BadRequestJSONResponse }

func (response GetGameById400JSONResponse) VisitGetGameByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetGameById500JSONResponse struct{ ServerErrorJSONResponse }

func (response GetGameById500JSONResponse) VisitGetGameByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGameByIdRequestObject struct {
	GameId uuid.UUID `json:"gameId"`
	Body   *UpdateGameByIdJSONRequestBody
}

type UpdateGameByIdResponseObject interface {
	VisitUpdateGameByIdResponse(w http.ResponseWriter) error
}

type UpdateGameById200JSONResponse struct {
	Game Game `json:"game"`
}

func (response UpdateGameById200JSONResponse) VisitUpdateGameByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGameById400JSONResponse struct{ BadRequestJSONResponse }

func (response UpdateGameById400JSONResponse) VisitUpdateGameByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGameById401JSONResponse struct{ UnauthorizedJSONResponse }

func (response UpdateGameById401JSONResponse) VisitUpdateGameByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGameById500JSONResponse struct{ ServerErrorJSONResponse }

func (response UpdateGameById500JSONResponse) VisitUpdateGameByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetFrontendParamsRequestObject struct {
}

type GetFrontendParamsResponseObject interface {
	VisitGetFrontendParamsResponse(w http.ResponseWriter) error
}

type GetFrontendParams200JSONResponse struct {
	Params FrontendParams `json:"params"`
}

func (response GetFrontendParams200JSONResponse) VisitGetFrontendParamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFrontendParams500JSONResponse struct{ ServerErrorJSONResponse }

func (response GetFrontendParams500JSONResponse) VisitGetFrontendParamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateSeriesRequestObject struct {
	Body *CreateSeriesJSONRequestBody
}

type CreateSeriesResponseObject interface {
	VisitCreateSeriesResponse(w http.ResponseWriter) error
}

type CreateSeries201JSONResponse struct {
	Series Series `json:"series"`
}

func (response CreateSeries201JSONResponse) VisitCreateSeriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateSeries400JSONResponse struct{ BadRequestJSONResponse }

func (response CreateSeries400JSONResponse) VisitCreateSeriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateSeries401JSONResponse struct{ UnauthorizedJSONResponse }

func (response CreateSeries401JSONResponse) VisitCreateSeriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateSeries500JSONResponse struct{ ServerErrorJSONResponse }

func (response CreateSeries500JSONResponse) VisitCreateSeriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSeriesByIdRequestObject struct {
	SeriesId uuid.UUID `json:"seriesId"`
}

type GetSeriesByIdResponseObject interface {
	VisitGetSeriesByIdResponse(w http.ResponseWriter) error
}

type GetSeriesById200JSONResponse struct {
	Games  []Game `json:"games"`
	Series Series `json:"series"`
}

func (response GetSeriesById200JSONResponse) VisitGetSeriesByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSeriesById400JSONResponse struct{ BadRequestJSONResponse }

func (response GetSeriesById400JSONResponse) VisitGetSeriesByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSeriesById500JSONResponse struct{ ServerErrorJSONResponse }

func (response GetSeriesById500JSONResponse) VisitGetSeriesByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSeriesByIdRequestObject struct {
	SeriesId uuid.UUID `json:"seriesId"`
	Body     *UpdateSeriesByIdJSONRequestBody
}

type UpdateSeriesByIdResponseObject interface {
	VisitUpdateSeriesByIdResponse(w http.ResponseWriter) error
}

type UpdateSeriesById200JSONResponse struct {
	Series Series `json:"series"`
}

func (response UpdateSeriesById200JSONResponse) VisitUpdateSeriesByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSeriesById400JSONResponse struct{ BadRequestJSONResponse }

func (response UpdateSeriesById400JSONResponse) VisitUpdateSeriesByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSeriesById401JSONResponse struct{ UnauthorizedJSONResponse }

func (response UpdateSeriesById401JSONResponse) VisitUpdateSeriesByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSeriesById500JSONResponse struct{ ServerErrorJSONResponse }

func (response UpdateSeriesById500JSONResponse) VisitUpdateSeriesByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTeamsRequestObject struct {
}

type GetTeamsResponseObject interface {
	VisitGetTeamsResponse(w http.ResponseWriter) error
}

type GetTeams200JSONResponse struct {
	Teams []Team `json:"teams"`
}

func (response GetTeams200JSONResponse) VisitGetTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTeams400JSONResponse struct{ BadRequestJSONResponse }

func (response GetTeams400JSONResponse) VisitGetTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetTeams500JSONResponse struct{ ServerErrorJSONResponse }

func (response GetTeams500JSONResponse) VisitGetTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateTeamRequestObject struct {
	Body *CreateTeamJSONRequestBody
}

type CreateTeamResponseObject interface {
	VisitCreateTeamResponse(w http.ResponseWriter) error
}

type CreateTeam201JSONResponse struct {
	Team Team `json:"team"`
}

func (response CreateTeam201JSONResponse) VisitCreateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateTeam400JSONResponse struct{ BadRequestJSONResponse }

func (response CreateTeam400JSONResponse) VisitCreateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateTeam401JSONResponse struct{ UnauthorizedJSONResponse }

func (response CreateTeam401JSONResponse) VisitCreateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateTeam500JSONResponse struct{ ServerErrorJSONResponse }

func (response CreateTeam500JSONResponse) VisitCreateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTournamentsRequestObject struct {
}

type GetTournamentsResponseObject interface {
	VisitGetTournamentsResponse(w http.ResponseWriter) error
}

type GetTournaments200JSONResponse struct {
	Tournaments []Tournament `json:"tournaments"`
}

func (response GetTournaments200JSONResponse) VisitGetTournamentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTournaments400JSONResponse struct{ BadRequestJSONResponse }

func (response GetTournaments400JSONResponse) VisitGetTournamentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetTournaments500JSONResponse struct{ ServerErrorJSONResponse }

func (response GetTournaments500JSONResponse) VisitGetTournamentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetGamesByTournamentIdRequestObject struct {
	TournamentId uuid.UUID `json:"tournamentId"`
}

type GetGamesByTournamentIdResponseObject interface {
	VisitGetGamesByTournamentIdResponse(w http.ResponseWriter) error
}

type GetGamesByTournamentId200JSONResponse struct {
	Games []Game `json:"games"`
}

func (response GetGamesByTournamentId200JSONResponse) VisitGetGamesByTournamentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGamesByTournamentId400JSONResponse struct{ BadRequestJSONResponse }

func (response GetGamesByTournamentId400JSONResponse) VisitGetGamesByTournamentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetGamesByTournamentId500JSONResponse struct{ ServerErrorJSONResponse }

func (response GetGamesByTournamentId500JSONResponse) VisitGetGamesByTournamentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSeriesByTournamentIdRequestObject struct {
	TournamentId uuid.UUID `json:"tournamentId"`
}

type GetSeriesByTournamentIdResponseObject interface {
	VisitGetSeriesByTournamentIdResponse(w http.ResponseWriter) error
}

type GetSeriesByTournamentId200JSONResponse struct {
	Series []Series `json:"series"`
}

func (response GetSeriesByTournamentId200JSONResponse) VisitGetSeriesByTournamentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSeriesByTournamentId400JSONResponse struct{ BadRequestJSONResponse }

func (response GetSeriesByTournamentId400JSONResponse) VisitGetSeriesByTournamentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSeriesByTournamentId500JSONResponse struct{ ServerErrorJSONResponse }

func (response GetSeriesByTournamentId500JSONResponse) VisitGetSeriesByTournamentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersRequestObject struct {
}

type GetUsersResponseObject interface {
	VisitGetUsersResponse(w http.ResponseWriter) error
}

type GetUsers200JSONResponse struct {
	Users []User `json:"users"`
}

func (response GetUsers200JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers400JSONResponse struct{ BadRequestJSONResponse }

func (response GetUsers400JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers500JSONResponse struct{ ServerErrorJSONResponse }

func (response GetUsers500JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser201JSONResponse struct {
	User User `json:"user"`
}

func (response CreateUser201JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser400JSONResponse struct{ BadRequestJSONResponse }

func (response CreateUser400JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser401JSONResponse struct{ UnauthorizedJSONResponse }

func (response CreateUser401JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser500JSONResponse struct{ ServerErrorJSONResponse }

func (response CreateUser500JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create game
	// (POST /games)
	CreateGame(ctx context.Context, request CreateGameRequestObject) (CreateGameResponseObject, error)
	// Get games
	// (GET /games/{gameId})
	GetGameById(ctx context.Context, request GetGameByIdRequestObject) (GetGameByIdResponseObject, error)
	// Update an existing game
	// (PUT /games/{gameId})
	UpdateGameById(ctx context.Context, request UpdateGameByIdRequestObject) (UpdateGameByIdResponseObject, error)
	// Get frontend params
	// (GET /params)
	GetFrontendParams(ctx context.Context, request GetFrontendParamsRequestObject) (GetFrontendParamsResponseObject, error)
	// Create series
	// (POST /series)
	CreateSeries(ctx context.Context, request CreateSeriesRequestObject) (CreateSeriesResponseObject, error)
	// Get series
	// (GET /series/{seriesId})
	GetSeriesById(ctx context.Context, request GetSeriesByIdRequestObject) (GetSeriesByIdResponseObject, error)
	// Update series
	// (PUT /series/{seriesId})
	UpdateSeriesById(ctx context.Context, request UpdateSeriesByIdRequestObject) (UpdateSeriesByIdResponseObject, error)
	// Get teams
	// (GET /teams)
	GetTeams(ctx context.Context, request GetTeamsRequestObject) (GetTeamsResponseObject, error)
	// Create team
	// (POST /teams)
	CreateTeam(ctx context.Context, request CreateTeamRequestObject) (CreateTeamResponseObject, error)
	// Get tournaments
	// (GET /tournaments)
	GetTournaments(ctx context.Context, request GetTournamentsRequestObject) (GetTournamentsResponseObject, error)
	// Get games
	// (GET /tournaments/{tournamentId}/games)
	GetGamesByTournamentId(ctx context.Context, request GetGamesByTournamentIdRequestObject) (GetGamesByTournamentIdResponseObject, error)
	// Get tournament series
	// (GET /tournaments/{tournamentId}/series)
	GetSeriesByTournamentId(ctx context.Context, request GetSeriesByTournamentIdRequestObject) (GetSeriesByTournamentIdResponseObject, error)
	// Get users
	// (GET /users)
	GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)
	// Create user
	// (POST /users)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// CreateGame operation middleware
func (sh *strictHandler) CreateGame(w http.ResponseWriter, r *http.Request) {
	var request CreateGameRequestObject

	var body CreateGameJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateGame(ctx, request.(CreateGameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateGame")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateGameResponseObject); ok {
		if err := validResponse.VisitCreateGameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGameById operation middleware
func (sh *strictHandler) GetGameById(w http.ResponseWriter, r *http.Request, gameId uuid.UUID) {
	var request GetGameByIdRequestObject

	request.GameId = gameId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetGameById(ctx, request.(GetGameByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGameById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetGameByIdResponseObject); ok {
		if err := validResponse.VisitGetGameByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateGameById operation middleware
func (sh *strictHandler) UpdateGameById(w http.ResponseWriter, r *http.Request, gameId uuid.UUID) {
	var request UpdateGameByIdRequestObject

	request.GameId = gameId

	var body UpdateGameByIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateGameById(ctx, request.(UpdateGameByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateGameById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateGameByIdResponseObject); ok {
		if err := validResponse.VisitUpdateGameByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFrontendParams operation middleware
func (sh *strictHandler) GetFrontendParams(w http.ResponseWriter, r *http.Request) {
	var request GetFrontendParamsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFrontendParams(ctx, request.(GetFrontendParamsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFrontendParams")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFrontendParamsResponseObject); ok {
		if err := validResponse.VisitGetFrontendParamsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSeries operation middleware
func (sh *strictHandler) CreateSeries(w http.ResponseWriter, r *http.Request) {
	var request CreateSeriesRequestObject

	var body CreateSeriesJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSeries(ctx, request.(CreateSeriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSeries")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateSeriesResponseObject); ok {
		if err := validResponse.VisitCreateSeriesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSeriesById operation middleware
func (sh *strictHandler) GetSeriesById(w http.ResponseWriter, r *http.Request, seriesId uuid.UUID) {
	var request GetSeriesByIdRequestObject

	request.SeriesId = seriesId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSeriesById(ctx, request.(GetSeriesByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSeriesById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSeriesByIdResponseObject); ok {
		if err := validResponse.VisitGetSeriesByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateSeriesById operation middleware
func (sh *strictHandler) UpdateSeriesById(w http.ResponseWriter, r *http.Request, seriesId uuid.UUID) {
	var request UpdateSeriesByIdRequestObject

	request.SeriesId = seriesId

	var body UpdateSeriesByIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSeriesById(ctx, request.(UpdateSeriesByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSeriesById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateSeriesByIdResponseObject); ok {
		if err := validResponse.VisitUpdateSeriesByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTeams operation middleware
func (sh *strictHandler) GetTeams(w http.ResponseWriter, r *http.Request) {
	var request GetTeamsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTeams(ctx, request.(GetTeamsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTeams")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTeamsResponseObject); ok {
		if err := validResponse.VisitGetTeamsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTeam operation middleware
func (sh *strictHandler) CreateTeam(w http.ResponseWriter, r *http.Request) {
	var request CreateTeamRequestObject

	var body CreateTeamJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTeam(ctx, request.(CreateTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTeam")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateTeamResponseObject); ok {
		if err := validResponse.VisitCreateTeamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTournaments operation middleware
func (sh *strictHandler) GetTournaments(w http.ResponseWriter, r *http.Request) {
	var request GetTournamentsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTournaments(ctx, request.(GetTournamentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTournaments")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTournamentsResponseObject); ok {
		if err := validResponse.VisitGetTournamentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGamesByTournamentId operation middleware
func (sh *strictHandler) GetGamesByTournamentId(w http.ResponseWriter, r *http.Request, tournamentId uuid.UUID) {
	var request GetGamesByTournamentIdRequestObject

	request.TournamentId = tournamentId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetGamesByTournamentId(ctx, request.(GetGamesByTournamentIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGamesByTournamentId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetGamesByTournamentIdResponseObject); ok {
		if err := validResponse.VisitGetGamesByTournamentIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSeriesByTournamentId operation middleware
func (sh *strictHandler) GetSeriesByTournamentId(w http.ResponseWriter, r *http.Request, tournamentId uuid.UUID) {
	var request GetSeriesByTournamentIdRequestObject

	request.TournamentId = tournamentId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSeriesByTournamentId(ctx, request.(GetSeriesByTournamentIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSeriesByTournamentId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSeriesByTournamentIdResponseObject); ok {
		if err := validResponse.VisitGetSeriesByTournamentIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsers operation middleware
func (sh *strictHandler) GetUsers(w http.ResponseWriter, r *http.Request) {
	var request GetUsersRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsers(ctx, request.(GetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersResponseObject); ok {
		if err := validResponse.VisitGetUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(w http.ResponseWriter, r *http.Request) {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx, request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaXW/bNhT9KwS3hw2QI6fbgMJvSbsG3jC0aGLsIcgDLV3LbC2SI6k0XuD/PvBDX5Zk",
	"KZ2dxkmfEonk5eW9h4eHV77HEU8FZ8C0wpN7LEEJzhTYh3MSf4R/MlDaPEWcaWD2XyLEikZEU87CT4oz",
	"805FS0iJ+e9HCQs8wT+EpenQtarwdym5xJvNJsAxqEhSYYzgCT5D0YoC00jRGNCcxEi6qRG4IQG+BHkL",
	"0ll4BH+Unc5Nj3gUZVJCbPyYMZLpJZf0X4gP78hfVCnKEsQlouyWrGiMzPRI88/AsOnvTZgZiuAIyQVI",
	"TV0iIx6D+avXAvAEU6YhARvTFJQiSbVRaUlZYg2bDFCz6Mm1M1H2vwny/nz+CSJtbL2TNhDxByJJqppe",
	"GLfPXOT0umXGwPZ4Y2EwjTs7XEZcDHC4PtuW7aqltqVckBRaFvCFrK+ApM65BZcp0XiCs4wai3V3Anw3",
	"SvjIvzRdTmaz6dvq+xFNBZcWN8zOl1sSRC/xBCdUL7P5ScTTMOE8WUFo2zdVE+ozFSNusUJWI8FNaiWe",
	"aJmBCZd3+DLisgMAeZeZAnk061ryFI4qEbnDOxKRdzmqRNBv7ygngo4MOyXARnCnJRlpktj9mnCZ4gkW",
	"kqZErj/D2tElSApqegyeUxbDnTsUqtTmXOWZNFN6PitW1UZnl7axSWgLKpU+qo1UeLxjJxV9vm+lA28l",
	"yTNm3a5LFvsasSydg0R6STTSS6qQgyiiChEkiNSIL9BP4wCdBujVz+VaK5lUEHEWHxVAS5d3ILTsdFQQ",
	"rVHOs2JPB+Q26jRJahLnMW5W5jVtQ1SrVZb062nrl7XhR7RGqwjrs45ZZ2jaYmK2+HNH0JJL/dBYVYc1",
	"4+ZYMjOXt0tzv/UVCSASpLnWmae5fXqXx/CPv6+wvw0bS661DOpSa+HYgLIFb55aZx+mKFMQo/ka6SWg",
	"hb/OGgtUr4yJEt4KnX2Y4gDfglRu+Pjk9GRsgsEFMCIonuBfTsYnY58L636YEL8QwV1Rpe7CGwlEAyIo",
	"cQEygLHFBMO3vvXCNfnqyDmP13urQVjTLSWIwi0GX3LXypz6w6FWOXo1Pn2QV/W9kXgkDfC1Dq6kA0sd",
	"K7L74NfxuGuuYklhpRJmh5z2D6lViTYB/m3IPNUSV3UL4Ml1HfzXN5ubAKssNfuzTJFPjtvG17aMofCN",
	"seSgF96bP9N4Y8MMLRD8CDqTTHkMmr0wfXvSgOIFaGP7fD11XCNJChqksn7WDU7fGp3nHaPmjaWmnE2w",
	"c6iBqKCCjm/GkhsT5C1gj580sN//+ZWY/jp4Fvi7AI0cuTXRF2CRtSBtJmLLKgzBHVWasqSd9ly/FwS3",
	"xyP27hT00fsz3QVPkNm7c9TG8qKovbeyu9mm5fbpkjsNrt+q7O8VDaXHu/Cw5cE2MryR4djYA93lAUMi",
	"j0qekNxZnxNVVt92qz7fsV33XeaNhyAIb7xP+6mqD4dSf2W4BnlcB4If/JI1YJGkHI4+VFUwhvd5vXiI",
	"ElxRZYt1voDXrQndTMOP6cLVloO6KGi/GGXo6gIa+tnQnY7FcomUZI2LTxv/b+sE3penrja7YT5cb3YQ",
	"ruv54sD8mMfKrmQcUns+1uHyDBXo7nNFwy7d2TxLbP/WQ+QK9q4xC+cGsast+TfYdQsLzuRTJ0kNdWXq",
	"YmspcrcUNQM7hOiVazoEX7jI94hQXc5/KAmq/UefAb42UfGixadPzjbeLEOUxfOH8EQ5qp0tKlb3yxl1",
	"d4cxR/n5q5c/KuafPIvUYlzktrqC7QyH99UvrJvyw8fAtNv+aMGl4aLCUmchWp2vr+pfdAcIttJuu2jb",
	"/kb8/RYy5BbSUrNTR1u67kF1qSYfdoMehOv8/vEd2PuU/YOQnev/Hmw/xn1gr/Tdo+EzZVE1GM22fyt2",
	"Z9bSXlNYODcog/ZHF335cyafevoyH8s8ZS62AzS8Gdih4Weu6RAa3kW+R8Nn5fyH0vCZ/9nNAF+bqHjR",
	"Gt4nZxtv/rfTt+0nz4pHZIViuIUVF5ZrNNi6Dg5wJlf+9zeTMLQdl1zpyevx63FIBA1vT7FxxE+4bfl9",
	"jl+FyJxn23LUnytVNboJem0UROiHF4zfOzKXCn6gUwoDxuXb2I9zUR0wLr/C5+u0jzvHdXzV8waKj1Ob",
	"m81/AQAA//+U/j+O/jUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
