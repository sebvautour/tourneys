//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	uuid "github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// Game defines model for Game.
type Game struct {
	AwayTeamId     uuid.UUID `json:"awayTeamId,omitempty"`
	AwayTeamScore  *int      `json:"awayTeamScore,omitempty"`
	AwayTeamUserId uuid.UUID `json:"awayTeamUserId,omitempty"`
	HomeTeamId     uuid.UUID `json:"homeTeamId,omitempty"`
	HomeTeamScore  *int      `json:"homeTeamScore,omitempty"`
	HomeTeamUserId uuid.UUID `json:"homeTeamUserId,omitempty"`
	Id             uuid.UUID `gorm:"primarykey" json:"id"`
	SeriesId       uuid.UUID `gorm:"index" json:"seriesId"`
}

// Series defines model for Series.
type Series struct {
	FirstTeamId     uuid.UUID `json:"firstTeamId,omitempty"`
	FirstTeamScore  *int      `json:"firstTeamScore,omitempty"`
	FirstTeamUserId uuid.UUID `json:"firstTeamUserId,omitempty"`
	Id              uuid.UUID `gorm:"primarykey" json:"id"`

	// Round round number that this series is a part of (0, 1, 2)
	Round            int       `json:"round"`
	SecondTeamId     uuid.UUID `json:"secondTeamId,omitempty"`
	SecondTeamScore  *int      `json:"secondTeamScore,omitempty"`
	SecondTeamUserId uuid.UUID `json:"secondTeamUserId,omitempty"`
	TournamentId     uuid.UUID `gorm:"index" json:"tournamentId"`
}

// Team defines model for Team.
type Team struct {
	Id   uuid.UUID `gorm:"primarykey" json:"id"`
	Name string    `json:"name"`
	Slug string    `json:"slug"`
}

// Tournament defines model for Tournament.
type Tournament struct {
	Id   uuid.UUID `gorm:"primarykey" json:"id"`
	Name string    `json:"name"`
}

// User defines model for User.
type User struct {
	Id        uuid.UUID `gorm:"primarykey" json:"id"`
	Name      string    `json:"name"`
	Shortname string    `json:"shortname"`
}

// BadRequest defines model for BadRequest.
type BadRequest = Error

// ServerError defines model for ServerError.
type ServerError = Error

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get games
	// (GET /games/{gameId})
	GetGameById(w http.ResponseWriter, r *http.Request, gameId uuid.UUID)
	// Get series
	// (GET /series/{seriesId})
	GetSeriesById(w http.ResponseWriter, r *http.Request, seriesId uuid.UUID)
	// Get teams
	// (GET /teams)
	GetTeams(w http.ResponseWriter, r *http.Request)
	// Get tournaments
	// (GET /tournaments)
	GetTournaments(w http.ResponseWriter, r *http.Request)
	// Get games
	// (GET /tournaments/{tournamentId}/games)
	GetGamesByTournamentId(w http.ResponseWriter, r *http.Request, tournamentId uuid.UUID)
	// Get tournament series
	// (GET /tournaments/{tournamentId}/series)
	GetSeriesByTournamentId(w http.ResponseWriter, r *http.Request, tournamentId uuid.UUID)
	// Get users
	// (GET /users)
	GetUsers(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetGameById operation middleware
func (siw *ServerInterfaceWrapper) GetGameById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "gameId" -------------
	var gameId uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "gameId", r.PathValue("gameId"), &gameId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "gameId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGameById(w, r, gameId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSeriesById operation middleware
func (siw *ServerInterfaceWrapper) GetSeriesById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "seriesId" -------------
	var seriesId uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "seriesId", r.PathValue("seriesId"), &seriesId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "seriesId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSeriesById(w, r, seriesId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTeams operation middleware
func (siw *ServerInterfaceWrapper) GetTeams(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTeams(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTournaments operation middleware
func (siw *ServerInterfaceWrapper) GetTournaments(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTournaments(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetGamesByTournamentId operation middleware
func (siw *ServerInterfaceWrapper) GetGamesByTournamentId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "tournamentId" -------------
	var tournamentId uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tournamentId", r.PathValue("tournamentId"), &tournamentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tournamentId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGamesByTournamentId(w, r, tournamentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSeriesByTournamentId operation middleware
func (siw *ServerInterfaceWrapper) GetSeriesByTournamentId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "tournamentId" -------------
	var tournamentId uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tournamentId", r.PathValue("tournamentId"), &tournamentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tournamentId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSeriesByTournamentId(w, r, tournamentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/games/{gameId}", wrapper.GetGameById)
	m.HandleFunc("GET "+options.BaseURL+"/series/{seriesId}", wrapper.GetSeriesById)
	m.HandleFunc("GET "+options.BaseURL+"/teams", wrapper.GetTeams)
	m.HandleFunc("GET "+options.BaseURL+"/tournaments", wrapper.GetTournaments)
	m.HandleFunc("GET "+options.BaseURL+"/tournaments/{tournamentId}/games", wrapper.GetGamesByTournamentId)
	m.HandleFunc("GET "+options.BaseURL+"/tournaments/{tournamentId}/series", wrapper.GetSeriesByTournamentId)
	m.HandleFunc("GET "+options.BaseURL+"/users", wrapper.GetUsers)

	return m
}

type BadRequestJSONResponse Error

type ServerErrorJSONResponse Error

type GetGameByIdRequestObject struct {
	GameId uuid.UUID `json:"gameId"`
}

type GetGameByIdResponseObject interface {
	VisitGetGameByIdResponse(w http.ResponseWriter) error
}

type GetGameById200JSONResponse struct {
	Game Game `json:"game"`
}

func (response GetGameById200JSONResponse) VisitGetGameByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGameById400JSONResponse struct{ BadRequestJSONResponse }

func (response GetGameById400JSONResponse) VisitGetGameByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetGameById500JSONResponse struct{ ServerErrorJSONResponse }

func (response GetGameById500JSONResponse) VisitGetGameByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSeriesByIdRequestObject struct {
	SeriesId uuid.UUID `json:"seriesId"`
}

type GetSeriesByIdResponseObject interface {
	VisitGetSeriesByIdResponse(w http.ResponseWriter) error
}

type GetSeriesById200JSONResponse struct {
	Games  []Game `json:"games"`
	Series Series `json:"series"`
}

func (response GetSeriesById200JSONResponse) VisitGetSeriesByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSeriesById400JSONResponse struct{ BadRequestJSONResponse }

func (response GetSeriesById400JSONResponse) VisitGetSeriesByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSeriesById500JSONResponse struct{ ServerErrorJSONResponse }

func (response GetSeriesById500JSONResponse) VisitGetSeriesByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTeamsRequestObject struct {
}

type GetTeamsResponseObject interface {
	VisitGetTeamsResponse(w http.ResponseWriter) error
}

type GetTeams200JSONResponse struct {
	Teams []Team `json:"teams"`
}

func (response GetTeams200JSONResponse) VisitGetTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTeams400JSONResponse struct{ BadRequestJSONResponse }

func (response GetTeams400JSONResponse) VisitGetTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetTeams500JSONResponse struct{ ServerErrorJSONResponse }

func (response GetTeams500JSONResponse) VisitGetTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTournamentsRequestObject struct {
}

type GetTournamentsResponseObject interface {
	VisitGetTournamentsResponse(w http.ResponseWriter) error
}

type GetTournaments200JSONResponse struct {
	Tournaments []Tournament `json:"tournaments"`
}

func (response GetTournaments200JSONResponse) VisitGetTournamentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTournaments400JSONResponse struct{ BadRequestJSONResponse }

func (response GetTournaments400JSONResponse) VisitGetTournamentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetTournaments500JSONResponse struct{ ServerErrorJSONResponse }

func (response GetTournaments500JSONResponse) VisitGetTournamentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetGamesByTournamentIdRequestObject struct {
	TournamentId uuid.UUID `json:"tournamentId"`
}

type GetGamesByTournamentIdResponseObject interface {
	VisitGetGamesByTournamentIdResponse(w http.ResponseWriter) error
}

type GetGamesByTournamentId200JSONResponse struct {
	Games []Game `json:"games"`
}

func (response GetGamesByTournamentId200JSONResponse) VisitGetGamesByTournamentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGamesByTournamentId400JSONResponse struct{ BadRequestJSONResponse }

func (response GetGamesByTournamentId400JSONResponse) VisitGetGamesByTournamentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetGamesByTournamentId500JSONResponse struct{ ServerErrorJSONResponse }

func (response GetGamesByTournamentId500JSONResponse) VisitGetGamesByTournamentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSeriesByTournamentIdRequestObject struct {
	TournamentId uuid.UUID `json:"tournamentId"`
}

type GetSeriesByTournamentIdResponseObject interface {
	VisitGetSeriesByTournamentIdResponse(w http.ResponseWriter) error
}

type GetSeriesByTournamentId200JSONResponse struct {
	Series []Series `json:"series"`
}

func (response GetSeriesByTournamentId200JSONResponse) VisitGetSeriesByTournamentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSeriesByTournamentId400JSONResponse struct{ BadRequestJSONResponse }

func (response GetSeriesByTournamentId400JSONResponse) VisitGetSeriesByTournamentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSeriesByTournamentId500JSONResponse struct{ ServerErrorJSONResponse }

func (response GetSeriesByTournamentId500JSONResponse) VisitGetSeriesByTournamentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersRequestObject struct {
}

type GetUsersResponseObject interface {
	VisitGetUsersResponse(w http.ResponseWriter) error
}

type GetUsers200JSONResponse struct {
	Users []User `json:"users"`
}

func (response GetUsers200JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers400JSONResponse struct{ BadRequestJSONResponse }

func (response GetUsers400JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers500JSONResponse struct{ ServerErrorJSONResponse }

func (response GetUsers500JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get games
	// (GET /games/{gameId})
	GetGameById(ctx context.Context, request GetGameByIdRequestObject) (GetGameByIdResponseObject, error)
	// Get series
	// (GET /series/{seriesId})
	GetSeriesById(ctx context.Context, request GetSeriesByIdRequestObject) (GetSeriesByIdResponseObject, error)
	// Get teams
	// (GET /teams)
	GetTeams(ctx context.Context, request GetTeamsRequestObject) (GetTeamsResponseObject, error)
	// Get tournaments
	// (GET /tournaments)
	GetTournaments(ctx context.Context, request GetTournamentsRequestObject) (GetTournamentsResponseObject, error)
	// Get games
	// (GET /tournaments/{tournamentId}/games)
	GetGamesByTournamentId(ctx context.Context, request GetGamesByTournamentIdRequestObject) (GetGamesByTournamentIdResponseObject, error)
	// Get tournament series
	// (GET /tournaments/{tournamentId}/series)
	GetSeriesByTournamentId(ctx context.Context, request GetSeriesByTournamentIdRequestObject) (GetSeriesByTournamentIdResponseObject, error)
	// Get users
	// (GET /users)
	GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetGameById operation middleware
func (sh *strictHandler) GetGameById(w http.ResponseWriter, r *http.Request, gameId uuid.UUID) {
	var request GetGameByIdRequestObject

	request.GameId = gameId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetGameById(ctx, request.(GetGameByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGameById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetGameByIdResponseObject); ok {
		if err := validResponse.VisitGetGameByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSeriesById operation middleware
func (sh *strictHandler) GetSeriesById(w http.ResponseWriter, r *http.Request, seriesId uuid.UUID) {
	var request GetSeriesByIdRequestObject

	request.SeriesId = seriesId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSeriesById(ctx, request.(GetSeriesByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSeriesById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSeriesByIdResponseObject); ok {
		if err := validResponse.VisitGetSeriesByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTeams operation middleware
func (sh *strictHandler) GetTeams(w http.ResponseWriter, r *http.Request) {
	var request GetTeamsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTeams(ctx, request.(GetTeamsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTeams")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTeamsResponseObject); ok {
		if err := validResponse.VisitGetTeamsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTournaments operation middleware
func (sh *strictHandler) GetTournaments(w http.ResponseWriter, r *http.Request) {
	var request GetTournamentsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTournaments(ctx, request.(GetTournamentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTournaments")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTournamentsResponseObject); ok {
		if err := validResponse.VisitGetTournamentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGamesByTournamentId operation middleware
func (sh *strictHandler) GetGamesByTournamentId(w http.ResponseWriter, r *http.Request, tournamentId uuid.UUID) {
	var request GetGamesByTournamentIdRequestObject

	request.TournamentId = tournamentId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetGamesByTournamentId(ctx, request.(GetGamesByTournamentIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGamesByTournamentId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetGamesByTournamentIdResponseObject); ok {
		if err := validResponse.VisitGetGamesByTournamentIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSeriesByTournamentId operation middleware
func (sh *strictHandler) GetSeriesByTournamentId(w http.ResponseWriter, r *http.Request, tournamentId uuid.UUID) {
	var request GetSeriesByTournamentIdRequestObject

	request.TournamentId = tournamentId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSeriesByTournamentId(ctx, request.(GetSeriesByTournamentIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSeriesByTournamentId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSeriesByTournamentIdResponseObject); ok {
		if err := validResponse.VisitGetSeriesByTournamentIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsers operation middleware
func (sh *strictHandler) GetUsers(w http.ResponseWriter, r *http.Request) {
	var request GetUsersRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsers(ctx, request.(GetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersResponseObject); ok {
		if err := validResponse.VisitGetUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
